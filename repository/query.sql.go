// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (login, pwd_hash) values ($1, $2) returning id
`

type CreateUserParams struct {
	Login   string `json:"login"`
	PwdHash string `json:"pwd_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Login, arg.PwdHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserByID = `-- name: DeleteUserByID :execrows
delete from users where id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUserByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUserByID = `-- name: GetUserByID :one
select id, login, pwd_hash, created_at from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PwdHash,
		&i.CreatedAt,
	)
	return i, err
}

const isUserValid = `-- name: IsUserValid :one
select id, login, pwd_hash, created_at from users where login = $1
`

func (q *Queries) IsUserValid(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, isUserValid, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PwdHash,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPwd = `-- name: UpdateUserPwd :one
update users set pwd_hash = $2 where id = $1 returning id, login, pwd_hash, created_at
`

type UpdateUserPwdParams struct {
	ID      int32  `json:"id"`
	PwdHash string `json:"pwd_hash"`
}

func (q *Queries) UpdateUserPwd(ctx context.Context, arg UpdateUserPwdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPwd, arg.ID, arg.PwdHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PwdHash,
		&i.CreatedAt,
	)
	return i, err
}
